connects to the bluefruit nRF8001 chip and sends a piece of data (currently just says "HI") to the chip at 10 Hz. Each time this data is sent, quaternion data is received back from the arduino program. 

the quaternion data is parsed into an actual quaternion ("Quaternion" class), and is used to update the matplotlib figure:
    ax.current_rot = create_quaternion(data)

you can click the figure to "calibrate" the software side of things. calibration orients the figure so that it is in the identity quaternion direction (1,0,0,0) by measuring the difference between the quaternion given by the arduino and the unit quaternion - this is just the current quaternion given by the arduino

now, each time the figure gets redrawn, the plot gets rotated by the quaternion given by the arduino times the inverse of the calibration quaternion times the plot data:
    self.current_rot * self.rot_cal.inv() * rot # this is in the draw_cube() function of CubeAxes class

self.current_rot is the quaternion given by the arduino
self.rot_cal.inv() is the inverse of the quaternion measured when the software was instructed to calibrate (in other words, the inverse of what self.current_rot was when you clicked the figure)
rot is the plot data used to plot the cube

in general math terms:
    vector_calibrated = q_current * q_calibration^(-1) * vector

Note that multiplication and inverse are defined differently for quaternions than normal vectors:
q1 = (w1,x1,y1,z1)
q2 = (w2,x2,y2,z2)

q1^(-1) = (w1,-x1,-y1,-z1)

q1*q2 = ( w2*w1 - x2*x1 - y2*y1 - z2*z1,
          w2*x1 + x2*w1 - y2*z1 + z2*y1,
          w2*y1 + x2*z1 + y2*w1 - z2*x1,
          w2*z1 - x2*y1 + y2*x1 + z2*w1 )

to rotate a vector by a quaternion:
vector = (x,y,z)

vector in quaternion form:
q_vec = (0,x,y,z)

rotate vec by q1:
q_vec_rotated = q1^(-1) * q_vec * q1

the w component of q_vec_rotated is 0, so just extract the x,y,z components to get the vector rotated by the quaternion q1





